version: 2.1

executors:
  multiimage:
    docker:
      - image: cimg/base:current
      - image: postgres:13.10
        environment:
          POSTGRES_DB: wiki
          POSTGRES_USER: Free
          POSTGRES_PASSWORD: Willy
      - image: redis:7.4-rc-alpine
    resource_class: large
  singleimage:
    docker:
      - image: cimg/base:current
        environment:
          POSTGRES_DB: wiki
          POSTGRES_USER: Free
          POSTGRES_PASSWORD: Willy
    resource_class: large

commands:
  inspect-container-network:
    parameters:
      image-tag:
        type: string
        description: image:tag to look up container (via ancestor filter)
    steps:
      - run:
          name: inspect << parameters.image-tag >>
          command: |
            CNTR_ID=$(docker ps --filter="ancestor=<< parameters.image-tag >>" --quiet)
            docker container inspect $CNTR_ID | jq -r ".[0].NetworkSettings.Networks"

jobs:
  multiimage:
    executor: multiimage
    steps:
      - setup_remote_docker:
          docker_layer_caching: false
      - run: docker ps
      - run: docker network ls
      - inspect-container-network:
          image-tag: "cimg/base:current"
      - inspect-container-network:
          image-tag: "postgres:13.10"
      - inspect-container-network:
          image-tag: "redis:7.4-rc-alpine"
      - run:
          name: find pause container
          command: |
            CNTR_ID_PAUSE=$(docker container ls --filter="ancestor=public.ecr.aws/eks-distro/kubernetes/pause:3.6" --quiet)
            echo "export CNTR_ID_PAUSE=${CNTR_ID_PAUSE}" >> $BASH_ENV
      - run:
          name: test connection to Postgres
          command: |
            dockerize -wait tcp://127.0.0.1:5432 -timeout 1m
      - run:
          name: test connection to Redis
          command: |
            dockerize -wait tcp://127.0.0.1:6379 -timeout 1m
  pass-env-vars-sidecar:
    executor: singleimage
    steps:
      - setup_remote_docker:
          docker_layer_caching: false
      - run:
          name: find current job container ID
          command: |
            echo "export CNTR_ID_MAIN=$(docker ps --filter='ancestor=cimg/base:current' --quiet)" >> $BASH_ENV
      - run:
          name: Spin up DB
          command: |
            # attach our sidecar DB container into the same network as our main job container, so they can communicate "locally"
            # NOTE: we are passing the env vars directly from the job container to our sidecar container
            docker container run --name=db --network "container:$CNTR_ID_MAIN" -e POSTGRES_DB -e POSTGRES_USER -e POSTGRES_PASSWORD --detach postgres:13.10
      - run:
          name: DB logs (tailed)
          command: docker container logs --follow db
          background: true
      - run:
          name: Wait for DB to be ready
          command: |
            sleep 30
            docker ps
      - checkout
      - run:
          name: Insert records
          command: |
            psql -h 127.0.0.1 -p 5432 -d $POSTGRES_DB -U $POSTGRES_USER -f schema.sql
      - run:
          name: Check table
          command: |
            psql -h 127.0.0.1 -p 5432 -d $POSTGRES_DB -U $POSTGRES_USER -c "SELECT * FROM characters;"
  docker-compose-connect:
    executor: singleimage
    steps:
      - setup_remote_docker:
          docker_layer_caching: false
      - checkout
      - run:
          name: get network name of pause container
          command: |
            # get container ID of pause container
            CNTR_ID_PAUSE=$(docker container ls --filter="ancestor=public.ecr.aws/eks-distro/kubernetes/pause:3.6" --quiet)

            NETWORK_NAME_PAUSE=$(docker container inspect $CNTR_ID_PAUSE | jq -r ".[0].NetworkSettings.Networks|to_entries|.[0].key")

            echo $NETWORK_NAME_PAUSE
            echo "export NETWORK_NAME_PAUSE=${NETWORK_NAME_PAUSE}" >> $BASH_ENV
      - run: yq eval ".networks.pause.name = \"$NETWORK_NAME_PAUSE\"" -i docker-compose.yml
      - run: yq eval '.networks.pause.external = true' -i docker-compose.yml
      - run: cat docker-compose.yml
      - run: docker-compose up -d
      - run:
          name: Wait for DB to be ready
          # NOTE: i refer to the container name (db) since that is the DNS record
          command: |
            dockerize -wait tcp://db:5432 -timeout 1m
      - run:
          name: Wait for Redis to be ready
          # NOTE: i refer to the container name (redis) since that is the DNS record
          command: |
            dockerize -wait tcp://redis:6379 -timeout 1m
      - run: echo "export PGPASSWORD=Willy" >> $BASH_ENV
      - run:
          name: Insert records
          command: |
            psql -h db -p 5432 -d wiki -U Free -f schema.sql
      - run:
          name: Check records
          command: |
            psql -h db -p 5432 -d wiki -U Free -c "SELECT * FROM characters;"
          

workflows:
  explore:
    jobs:
      # - multiimage
      - pass-env-vars-sidecar
      # - docker-compose-connect
